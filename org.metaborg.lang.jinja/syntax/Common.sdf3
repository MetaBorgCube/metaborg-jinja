module Common

lexical syntax

  LAYOUT      = [\ \n\t\r]
  CommentChar = ~[\"] | STRING
 
  ID = [a-zA-Z] [a-zA-Z0-9\_]*
  ID = Reserved {reject}
  
  Digit = [0-9]
  Num   = Digit+
  INT   = "-"? Num
  
  Ident = Reserved {reject}
	
	STRING     = "\"" StringChar* "\"" 
	StringChar = ~[\"\n]
	StringChar = "\\\""
	StringChar = BackSlashChar
	BackSlashChar = "\\"
	
	LAYOUT = [\ \t\n\r]
	
	CommentChar = [\*]
	LAYOUT = "/*" (~[\*] | CommentChar)* "*/"
	LAYOUT = "//" ~[\n\r]* ([\n\r] | EOF)
	
	EOF = 
	
  Reserved = "class"
	Reserved = "method"
  Reserved = "public"
  Reserved = "field"
  // Expressions:
  Reserved = "new"
  Reserved = "cast"
  Reserved = "val"
  Reserved = "var"
  Reserved = "if"
  Reserved = "else"
  Reserved = "while"
  Reserved = "try"
  Reserved = "catch"
  // Types:
  Reserved = "Boolean"
  Reserved = "Integer"
  Reserved = "Ref"
  Reserved = "NT"
  Reserved = "Void"
  // Values:
  Reserved = "True"
  Reserved = "False"
  Reserved = "Addr"
  Reserved = "Null"

lexical restrictions

	// Ensure greedy matching for lexicals
	
	CommentChar   -/- [\/]
	INT           -/- [0-9]
	ID            -/- [a-zA-Z0-9\_]
	
	// EOF may not be followed by any char
	
	EOF           -/- ~[]
	
	// Backslash chars in strings may not be followed by " 
	
	BackSlashChar -/- [\"]

context-free restrictions

	// Ensure greedy matching for comments
	
	LAYOUT? -/- [\ \t\n\r]
	LAYOUT? -/- [\/].[\/]
	LAYOUT? -/- [\/].[\*]

templates

  ClassID    = <<ID>>
  FieldID    = <<ID>>
  MethodID   = <<ID>>
  VariableID = <<ID>>
  AddrID     = <<Num>>
  
  ClassRef.ClassRef       = <<ClassID>>
  VariableRef.VariableRef = <<VariableID>>
